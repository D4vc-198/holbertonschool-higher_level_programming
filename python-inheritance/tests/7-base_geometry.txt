The ```BaseGeometry`` module
============================

using ``integer_validator``

---------------------------

Test import
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test value is not int
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("name", "1")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

Test normal int
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("name", 5)

Test value is less than 0
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("name", -1)
	Traceback (most recent call last):
	...
	ValueError: name must be greater than 0

Test area
	>>> bg = BaseGeometry()
	>>> print(bg.area())
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Test value empty
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("age")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Test value 0
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("age", 0)
	Traceback (most recent call last):
	...
	ValueError: age must be greater than 0

Test value  is (4)
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("age", (4,))
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

Test value is [3]
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("age", [3])
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

Test value is True
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("age", True)
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

Test value is {3, 4}
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("age", {3, 4})
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

Test value is None
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("age", None)
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

