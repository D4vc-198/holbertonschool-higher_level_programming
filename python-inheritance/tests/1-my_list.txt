TypeError: list() takes at most 1 argument (2 given)The ``MyList`` module
=====================

Using ``MyList ``

-------------------

Test import
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()

Test empty list
    >>> print(my_list)
    []

Test normal list
    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

Test empty list error
    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

Test list append
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

Test list replace
    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

Test list remove
    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

Test print sorted method
    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

Test ascending order
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

The order of the original list is not altered after a call to the method.
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test sorting str
    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

    >>> my_list.print_sorted()
    ['Betty', 'Brennan', 'Holberton', 'Poppy', 'School']

Test original list
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

Test nothing to sort with empty lists.

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

Test diferents items
    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    [1, 5, 'Betty', 'Holberton']
